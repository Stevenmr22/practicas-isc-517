plugins {
    id 'java'
    id 'application'
    id 'com.google.protobuf' version '0.8.17' //plugin para incluir la compilación de gRPC, ver: https://github.com/grpc/grpc-java#generated-code
    id 'idea' //plugins para la integración con el IDEA.
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

group = 'org.example'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation platform('org.junit:junit-bom:5.9.1')
    testImplementation 'org.junit.jupiter:junit-jupiter'

    // Javalin
    implementation 'io.javalin:javalin:5.6.1'
    implementation "org.slf4j:slf4j-simple:2.0.7"

    // Renderizado y motor de plantillas
    implementation "io.javalin:javalin-rendering:5.6.0"
    implementation 'org.thymeleaf:thymeleaf:3.1.2.RELEASE'

    // ODM y Base de datos
    implementation('dev.morphia.morphia:morphia-core:2.4.11')
    implementation("org.mongodb:mongodb-driver-sync:4.10.2")

    // Librería para JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.12.5'
    implementation 'io.jsonwebtoken:jjwt-impl:0.12.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.5'

    // Procesamiento JSON
    implementation("com.fasterxml.jackson.core:jackson-core:2.16.1")
    implementation('com.fasterxml.jackson.core:jackson-databind:2.16.1')
    implementation("com.fasterxml.jackson.core:jackson-annotations:2.16.1")

    // Librería para UUID
    implementation 'com.github.f4b6a3:uuid-creator:5.3.3'

    // Librería para parsear user-agent
    implementation 'com.github.ua-parser:uap-java:1.6.1'

    //Librerías necesarias para para implementar gRPC y Protobuf, ver: https://github.com/grpc/grpc-java
    implementation 'io.grpc:grpc-netty-shaded:1.39.0'
    implementation 'io.grpc:grpc-protobuf:1.39.0'
    implementation 'io.grpc:grpc-stub:1.39.0'
    compileOnly 'org.apache.tomcat:annotations-api:6.0.53' // necessary for Java 9+
    implementation 'com.google.protobuf:protobuf-java:3.17.3'
    implementation 'com.google.protobuf:protobuf-java-util:3.17.3'
}

application {
    mainClassName = 'org.example.Main'
}

//Tareas para la generación del código.
protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:3.17.2"
    }
    plugins {
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.39.0'
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }

    generatedFilesBaseDir = "$projectDir/generated"
}

//Tareas para integrar con el
clean {
    delete protobuf.generatedFilesBaseDir
}

idea {
    module {
        // proto files and generated Java files are automatically added as
        // source dirs.
        // If you have additional sources, add them here:
        sourceDirs += file("src/generated");
    }
}

test {
    useJUnitPlatform()
}

shadowJar{
    archiveBaseName.set("app")
    archiveClassifier.set('')
    archiveVersion.set('')
}

tasks.register('stage') {
    dependsOn shadowJar
}